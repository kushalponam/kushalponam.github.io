

Ship = function(i_x,i_y,width,height,image){
	
	this.x = i_x;
	this.y = i_y;
	this.width = width;
	this.height = height;
	
	this.speed = 3;
	this.bulletPool = new Pool(10);
	this.bulletPool.init();
   
	var fireRate = 30;
	var counter = 0;
	this.spaceshipImage = new Image();
	
	this.Init = function(){
		
		this.shipCanvas = document.getElementById('ship');
		this.mainCanvas = document.getElementById('main');
		
		this.shipContext = this.shipCanvas.getContext('2d');
		this.mainContext = this.mainCanvas.getContext('2d');
		
		this.spaceshipImage.src = image;
		this.canvasWidth = this.shipCanvas.width;
		this.canvasHeight = this.shipCanvas.height;
	};
	
	this.fire = function() {
		this.bulletPool.getTwo(this.x+6, this.y, 3,
		                       this.x+33, this.y, 3);
	};
	
	this.update = function(){
		counter++;
			if (keydown.left) {
				this.x -= this.speed
				if (this.x <= 0) // Keep player within the screen
					this.x = 0;
			} else if (keydown.right) {
				this.x += this.speed
				if (this.x >= this.canvasWidth - this.width)
					this.x = this.canvasWidth - this.width;
			} else if (keydown.up) {
				this.y -= this.speed
				if (this.y <= this.canvasHeight/4*3)
					this.y = this.canvasHeight/4*3;
			} else if (keydown.down) {
				this.y += this.speed
				if (this.y >= this.canvasHeight - this.height)
					this.y = this.canvasHeight - this.height;
			}
		}
		
		if (keydown.space && counter >= fireRate) {
			this.fire();
			counter = 0;
		}
	};
	
	
	
	this.draw = function(){
		this.context.drawImage(this.spaceshipImage, this.x, this.y);
	};
		
}

function Pool(maxSize) {
	var size = maxSize; // Max bullets allowed in the pool
	var pool = [];

	this.init = function() {
		for (var i = 0; i < size; i++) {
			// Initalize the bullet object
			var bullet = new Bullet();
			bullet.init(0,0, imageRepository.bullet.width,
			            imageRepository.bullet.height);
			pool[i] = bullet;
		}
	};
	
	this.get = function(x, y, speed) {   // Grabs the last item in the list and initializes it and pushes it to the front of the array.
		if(!pool[size - 1].alive) {
			pool[size - 1].spawn(x, y, speed);
			pool.unshift(pool.pop());
		}
	};
	
	/*
	 * Used for the ship to be able to get two bullets at once. If
	 * only the get() function is used twice, the ship is able to
	 * fire and only have 1 bullet spawn instead of 2.
	 */
	this.getTwo = function(x1, y1, speed1, x2, y2, speed2) {
		if(!pool[size - 1].alive && 
		   !pool[size - 2].alive) {
				this.get(x1, y1, speed1);
				this.get(x2, y2, speed2);
			 }
	};
	
	/*
	 * Draws any in use Bullets. If a bullet goes off the screen,
	 * clears it and pushes it to the front of the array.
	 */
	this.animate = function() {
		for (var i = 0; i < size; i++) {
			// Only draw until we find a bullet that is not alive
			if (pool[i].alive) {
				if (pool[i].draw()) {
					pool[i].clear();
					pool.push((pool.splice(i,1))[0]);
				}
			}
			else
				break;
		}
	};
}

function Bullet() {	
	this.alive = false; // Is true if the bullet is currently in use
	this.bulletImage = new Image();
	this.bulletImage.src = "imgs/bullet.png";
	
	/*
	 * Sets the bullet values
	 */
	this.spawn = function(x, y, speed) {
		this.x = x;
		this.y = y;
		this.speed = speed;
		this.alive = true;
	};

	this.draw = function() {
		//this.context.clearRect(this.x, this.y, this.width, this.height);
		this.y -= this.speed;
		if (this.y <= 0 - this.height) {
			return true;
		}
		else {
			this.context.drawImage(this.bulletImage, this.x, this.y);
		}
	};
	
	this.clear = function() {
		this.x = 0;
		this.y = 0;
		this.speed = 0;
		this.alive = false;
	};
}
//Bullet.prototype = new Drawable();
